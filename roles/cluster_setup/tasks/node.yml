---

# At this point we could copy and paste the join command from the master node. That command only works for 2 hours,
# so we will build our own join should we want to add nodes in the future. Find the token on the master node. The token
# lasts 2 hours by default. If it has been longer, and no token is present you can generate a new one with the sudo
# kubeadm token create command, seen in the following command.
- name: Get a token from master
  ansible.builtin.command: "kubeadm token create"
  delegate_to: "{{ groups['k8s_master'][0] }}"
  register: k8s_token
  changed_when: true

# Create and use a Discovery Token CA Cert Hash created from the master to ensure the node joins the cluster in a secure manner.
- name: Create Discovery Token
  ansible.builtin.shell: |
    set -o pipefail
    openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | \
      openssl rsa -pubin -outform der 2>/dev/null | \
      openssl dgst -sha256 -hex | sed 's/^.* //'
  delegate_to: "{{ groups['k8s_master'][0] }}"
  args:
    executable: /bin/bash
  register: k8s_discovery_token
  changed_when: true

# Use the token and hash, in this case as sha256:long-hash to join the cluster from the second/worker node. Use the
# private IP address of the master server and port 6443. The output of the kubeadm init on the master also has an
# example to use, should it still be available
- name: Join Node to Cluster
  ansible.builtin.shell: |
    set -o pipefail
    kubeadm join \
      --token {{ k8s_token.stdout }} \
      {{ k8s_control_plane_host }}:6443 \
      --discovery-token-ca-cert-hash sha256:{{ k8s_discovery_token.stdout }} \
      | tee /root/kubeadm_join.log
  args:
    executable: /bin/bash
  register: join_output
  changed_when: "join_output.rc == 0"
  failed_when: "join_output.rc != 0"
