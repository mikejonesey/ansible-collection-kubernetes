---
# defaults file for cluster_reconfigure

kubernetes_version: "1.30.3-1.1"

# --------------------------------------------------

# The control plane definition
k8s_control_plane_port: "{{ ha_loadbalancer_apiserver_lb_port | default('6443') }}"

# a master node (used when clustered but no HA - default back to local)
k8s_control_plane_host: "{{ hostvars[groups['k8s_master'][0]].inventory_hostname | default('k8smaster') }}"
k8s_control_plane_ip: "{{ hostvars[groups['k8s_master'][0]].ansible_ssh_host | default('127.0.0.1') }}"

# --------------------------------------------------

# The Service CIDR
k8s_service_subnet: "10.96.0.0/16"

# The POD CIDR
k8s_pod_subnet: "10.244.0.0/24"

# --------------------------------------------------

kubernetes_kubeadm_config_template: "kubeadm-config.yml.j2"

# Default Kube Config Template Vars

kubernetes_audit_policy_enabled: false
kubernetes_audit_webhook_enable: false

kubernetes_audit_log_path: "/var/log/kubernetes/audit/audit.log" # where logs should be written within the pod
kubernetes_audit_log_mode: "batch" # default blocking
kubernetes_audit_log_maxbackup: 2 # max log files to retain
kubernetes_audit_log_maxage: 7 # how many days to keep
kubernetes_audit_log_maxsize: 200 # size in megabytes before the log is rotated.

kubernetes_audit_webhook_server: "http://{{ ha_loadbalancer_vip_name | default('localhost') }}:30007/k8s-audit"
kubernetes_audit_webhook_mode: "batch" # default batch, all modes: batch,blocking,blocking-strict
kubernetes_audit_webhook_batch_buffer_size: "10000"
kubernetes_audit_webhook_initial_backoff: "10m" # default 10s - retry of failed
kubernetes_audit_webhook_batch_max_size: "500" # default 400
kubernetes_audit_webhook_batch_max_wait: "30s" # default 30s
kubernetes_audit_webhook_truncate_enabled: "true" # default false

# --------------------------------------------------

# Audit

# Falco Example
kubernetes_audit_policy_rules:
  omitStages:
    - "RequestReceived"
  rules:
    # Log pod changes at RequestResponse level
    - level: RequestResponse
      resources:
        - group: ""
          # Resource "pods" doesn't match requests to any subresource of pods,
          # which is consistent with the RBAC policy.
          resources: ["pods", "deployments"]

    - level: RequestResponse
      resources:
        - group: "rbac.authorization.k8s.io"
          # Resource "pods" doesn't match requests to any subresource of pods,
          # which is consistent with the RBAC policy.
          resources: ["clusterroles", "clusterrolebindings"]

    # Log "pods/log", "pods/status" at Metadata level
    - level: Metadata
      resources:
        - group: ""
          resources: ["pods/log", "pods/status"]

    # Don't log requests to a configmap called "controller-leader"
    - level: None
      resources:
        - group: ""
          resources: ["configmaps"]
          resourceNames: ["controller-leader"]

    # Don't log watch requests by the "system:kube-proxy" on endpoints or services
    - level: None
      users: ["system:kube-proxy"]
      verbs: ["watch"]
      resources:
        - group: "" # core API group
          resources: ["endpoints", "services"]

    # Don't log authenticated requests to certain non-resource URL paths.
    - level: None
      userGroups: ["system:authenticated"]
      nonResourceURLs:
        - "/api*" # Wildcard matching.
        - "/version"

    # Log the request body of configmap changes in kube-system.
    - level: Request
      resources:
        - group: "" # core API group
          resources: ["configmaps"]
      # This rule only applies to resources in the "kube-system" namespace.
      # The empty string "" can be used to select non-namespaced resources.
      namespaces: ["kube-system"]

    # Log configmap changes in all other namespaces at the RequestResponse level.
    - level: RequestResponse
      resources:
        - group: "" # core API group
          resources: ["configmaps"]

    # Log secret changes in all other namespaces at the Metadata level.
    - level: Metadata
      resources:
        - group: "" # core API group
          resources: ["secrets"]

    # Log all other resources in core and extensions at the Request level.
    - level: Request
      resources:
        - group: "" # core API group
        - group: "extensions" # Version of group should NOT be included.

    # A catch-all rule to log all other requests at the Metadata level.
    - level: Metadata
      # Long-running requests like watches that fall under this rule will not
      # generate an audit event in RequestReceived.
      omitStages:
        - "RequestReceived"

# --------------------------------------------------
